[
    {
        "id":1,
        "image": "https://9to5google.com/wp-content/uploads/sites/4/2020/02/office-header.jpg?quality=82&strip=all",
        "title": "Activate Office 2019",
        "question": "How to activate office 2019 in Windows 11?",
        "description": "If you have installed Microsoft Office 2019 and your activation license is expired follow these steps to activate it.",
        "steps":"Step 1: Type cmd in search option of windows.Step 2: Click run as administrator to Open command prompt in administrator mode.Step 3: Open location of the Office installed on your PC, to do this you have to run command: cd /d %ProgramFiles%\\Microsoft Office\\Office16 , if it doesn’t work run cd /d %ProgramFiles(x86)%\\Microsoft Office\\Office16.Step 4: Convert your retail license to volume one, to do this run command: for /f %x in ('dir /b \\..\\root\\Licenses16\\ProPlus2019VL*.xrm-ms') do cscript ospp.vbs /inslic:'..\\root\\Licenses16\\%x'.Step 5: Make sure your PC is connected to the internet, then run the following command: cscript ospp.vbs /setprt:1688 ; cscript ospp.vbs /unpkey:6MWKP >nul ; cscript ospp.vbs /inpkey:NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP ; cscript ospp.vbs /sethst:ms8.us.to ; cscript ospp.vbs /act. This is it, if you see the error 0xC004F074, it means that your internet connection is unstable or the server is busy. Please make sure your device is online and try the command “act” again until you succeed" 
    },
    {
        "id":2,
        "image": "https://miro.medium.com/max/1200/1*hYSKyofnqThnPIsYRfnUUQ.png",
        "title": "Manage State",
        "question": "What are the different ways to manage a state in a React application?",
        "description": "There are four main types of state you need to properly manage in your React apps: 1. Local state, 2. Global state, 3. Server state, 4. URL state. Let's cover each of these in detail: Local state is perhaps the easiest kind of state to manage in React, considering there are so many tools built into the core React library for managing it. useState is the first tool you should reach for to manage state in your components. It can take accept any valid data value, including primitive and object values. Additionally, its setter function can be passed down to other components as a callback function (without needing optimizations like useCallback). useReducer is another option that can be used for either local or global state. It is similar in many ways to useState under the hood, although instead of just an initial state it accepts a reducer. The benefit of useReducer is that it provides a built-in way to perform a number of different state operations with the help of the reducer function, which makes it more dynamic overall than useState. Once you attempt to manage state across multiple components, things get a bit trickier. You will reach a point in your application where patterns like “lifting state up” and passing callbacks down to update your state from components lead to lots and lots of props. What do you do if you want to update a component’s state from basically anywhere in your app? You turn it into global state. To manage it, however, you should opt for a third-party solution. Many developers are inclined to use built-in React features like the Context API to manage their state. The reason to not use Context for global state management lies in the way it works. The default behavior for Context is to re-render all children components if the value provided to it as a prop changes. Server state can be deceptively challenging to manage. At first, it seems you just need to fetch data and display it in the page. But then you need to display a loading spinner while you are waiting for the data. Then you need to handle errors and display them to the user as they arise. What happens when there is a network error? Do I really need to hit my server every time my user visits the home page if the data hasn’t changed? Do I need to add useState and useEffect in every component I want to fetch my data? To fix this, there are a couple of great libraries that make data fetching in React a breeze: SWR and React Query."
    },
    {
        "id":3,
        "image": "https://www.softwaretestinghelp.com/wp-content/qa/uploads/2012/11/Unit-Testing.png",
        "title": "Unit Test",
        "question": "What is a unit test? Why should we write unit tests?",
        "description": "Unit testing is a software development process in which the smallest testable parts of an application, called units, are individually and independently scrutinized for proper operation. This testing methodology is done during the development process by the software developers and sometimes QA staff.  The main objective of unit testing is to isolate written code to test and determine if it works as intended. Unit testing is an important step in the development process, because if done correctly, it can help detect early flaws in code which may be more difficult to find in later testing stages. Unit testing is a component of test-driven development (TDD), a pragmatic methodology that takes a meticulous approach to building a product by means of continual testing and revision. This testing method is also the first level of software testing, which is performed before other testing methods such as integration testing. Unit tests are typically isolated to ensure a unit does not rely on any external code or functions. Testing can be done manually but is often automated. How unit tests work? A unit test typically comprises of three stages: plan, cases and scripting and the unit test itself. In the first step, the unit test is prepared and reviewed. The next step is for the test cases and scripts to be made, then the code is tested. Test-driven development requires that developers first write failing unit tests. Then they write code and refactor the application until the test passes. TDD typically results in an explicit and predictable code base. Each test case is tested independently in an isolated environment, as to ensure a lack of dependencies in the code. The software developer should code criteria to verify each test case, and a testing framework can be used to report any failed tests. Developers should not make a test for every line of code, as this may take up too much time. Developers should then create tests focusing on code which could affect the behavior of the software being developed. Unit testing involves only those characteristics that are vital to the performance of the unit under test. This encourages developers to modify the source code without immediate concerns about how such changes might affect the functioning of other units or the program as a whole. Once all of the units in a program have been found to be working in the most efficient and error-free manner possible, larger components of the program can be evaluated by means of integration testing. Unit tests should be performed frequently, and can be done manually or can be automated. Advantages to unit testing include: The earlier a problem is identified, the fewer compound errors occur. Costs of fixing a problem early can quickly outweigh the cost of fixing it later. Debugging processes are made easier. Developers can quickly make changes to the code base. Developers can also re-use code, migrating it to new projects."
    },
    {
        "id":4,
        "image": "https://presence.agency/wp-content/uploads/2020/07/1_lC1kj3IeXoE8Z3OCKJoWkw.jpeg",
        "title": "React vs. Angular vs. Vue",
        "question": "Explain React vs. Angular vs. Vue.",
        "description": "Key Differences Between Angular.Js, React.Js And Vue.Js. Architecture: Speaking of architecture, Angular.js is a full-fledged MVC framework that provides you with all the possibilities for out-of-the-box programming: Templates based on HTML; Dependency injection; Ajax requests; Routing;Encapsulation of CSS components; Components testing utilities; Opportunities to create forms, etc. React.js, on the other hand, is a library that just offers the view, leaving the developer to decide how to construct the Model and Controller. The following features are provided: As an add-on to JavaScript, the JSX language, which is similar to XML, is used instead of templates; No introduction of dependencies; Ajax requests; Vue.js is a library that allows you to create interactive web interfaces. Vue.js is primarily concerned with the ViewModel layer of the MVVM architecture. It uses two-way data bindings to attach the View and the Model. Directives and Filters abstract away the actual DOM operations and output formatting. Data Binding: Angular.js uses the two-way binding. The state of the model is changed first, and then the modification of the interface element is reflected. The interface element changes as the model’s state changes, which is why two-way data binding is used. React.js has one-way binding. First, the state of the model is updated, and then it reflects the change of the interface element. If you change the interface element, the state of the model stays the same. As on Angular, the data binding on Vue.js is two-way. Vue.js synchronizes the entire model with the DOM mechanically. This implies that all Vue.js templates are fundamentally legal, parsable HTML with a few extra features. Remember this because Vue templates are fundamentally different from string-based templates. Mobile solutions: Each one of the three compared web development frameworks offers mobile solutions for apps development. When it comes to Angular, this is the Ionic framework, which makes use of Angular’s Cordova container. You download the app, which is a web application running within a web browser. React.js doesn’t have a similar framework. React Native is a platform for creating actual native mobile applications. Vue has announced its support for the Alibaba Group’s Weex project, which is a cross-platform UI framework. Weex allows you to develop browser components as well as iOS and Android apps using the same Vue syntax.Ease of learning: In the case of React.js, you need to learn JSX first, which is not a problem since it’s quite simple. Then you need to go through the routing library (react-router v4, for example) and then the state management libraries (Redux or MobX). In the case of Angular, there are way more steps to make and information to learn. From basic terms (directives, modules, decorators, components, services, dependency inputs, pipes, and templates), this is followed by topics as change detection, zones, AoT compilation, and Rx.js. And in the case of Vue.js, the fundamental features may be implemented in the first web applications in the least amount of time. Vue is simpler to understand than Angular or React since it is more adaptable. Furthermore, Vue’s functionality, such as the use of components, overlaps with that of Angular and React. Vue.js’s simplicity and adaptability, on the other hand, have a drawback: it enables poor code that is tough to debug and test. Syntax: Angular is written in TypeScript, which means you need some time to learn it to work with this framework. React uses JSX and native Javascript developers are familiar with it. The training period is easier and does not require that much preparation. Vue.js makes use of an HTML-based template syntax that allows you to link the displayed DOM to the data of the base element instance declaratively. All Vue.js templates are valid HTML that can be read by HTML analyzers and browsers that follow the standard.Integration: Angular provides a basic framework for building web applications and does not require any additional libraries. It is relatively rigid and inflexible as a complete framework.React.js is usually not enough to build a web app. In most instances, using extra libraries is advised. As a result, it’s more adaptable and simple to integrate into current mobile apps. Vue.js allows distinct features of an app to be implemented without altering the architecture. When it comes to integrating with other libraries, Vue is a perfect solution. Vue.js may be used to create both single-page apps and more complex online interfaces for apps.Performance: To capture all changes to the DOM, Angular.js creates a watcher for each binding. Every time the view updates, the new values compare with the old ones. This can end up in poorer performance in large mobile applications. Because React uses a virtual DOM, when the view is modified, the new DOM compares it to the virtual DOM and changes accordingly. Vue.js has better performance thanks to the virtual DOM, which is useful for complicated programs. It may be as little as 20KB while maintaining its speed and versatility, allowing it to achieve considerably better performance than competing frameworks.Ecosystem: The great thing about open source frameworks is that they provide developers with numerous tools or libraries. Thanks to the active community, there are a large number of extensions for Angular, React, and Vue that can be used: For easier bootstrapping of a project;For the development of apps For design matters;For the administration of states."
    }
]